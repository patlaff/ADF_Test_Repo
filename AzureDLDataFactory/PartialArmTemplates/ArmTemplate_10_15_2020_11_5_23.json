{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AzureDLDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Load_Local_SQL_to_Snowflake_and_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE = 'BASE TABLE'\nAND TABLE_NAME NOT IN ('AdventureWorksDWBuildVersion', 'DatabaseLog', 'sysdiagrams')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Local_DB_Table",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data to ADLS_staging",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@item().TABLE_NAME"
										},
										{
											"name": "Destination",
											"value": "@{concat('Data/AdventureWorks/',item().TABLE_NAME)}/@{item().TABLE_NAME}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{item().TABLE_SCHEMA}.@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Local_DB_Table",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "philly_adls_g2_staging_parquet",
											"type": "DatasetReference",
											"parameters": {
												"sourceName": {
													"value": "@variables('SOURCE')",
													"type": "Expression"
												},
												"schemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy Data from Staging to Snowflake",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy Data to ADLS_staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "SnowflakeSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE \"@{toUpper(item().TABLE_SCHEMA)}\".\"@{item().TABLE_NAME}\";",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage1",
												"type": "LinkedServiceReference"
											},
											"path": "snowflake-stage"
										},
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "philly_adls_g2_staging_parquet",
											"type": "DatasetReference",
											"parameters": {
												"sourceName": {
													"value": "@variables('SOURCE')",
													"type": "Expression"
												},
												"schemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Slalom_Snowflake_Azure_Lafferty_Test_Table",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@toUpper(item().TABLE_SCHEMA)",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Archive Data from ADLS_Staging to ADLS_Archive",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy Data from Staging to Snowflake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "philly_adls_g2_staging_parquet",
											"type": "DatasetReference",
											"parameters": {
												"sourceName": {
													"value": "@variables('SOURCE')",
													"type": "Expression"
												},
												"schemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "philly_adls_g2_archive_parquet",
											"type": "DatasetReference",
											"parameters": {
												"sourceName": {
													"value": "@variables('SOURCE')",
													"type": "Expression"
												},
												"schemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"variables": {
					"SOURCE": {
						"type": "String",
						"defaultValue": "AdventureWorksDW_Local"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-13T16:19:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/create_refined_pricesByProduct_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "create_refined_pricesByProduct_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "create_refined_pricesByProduct_dataflow",
								"type": "DataFlowReference"
							},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/create_refined_pricesByProduct_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/create_refined_pricesByProduct_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Slalom Azure Snowflake",
								"type": "LinkedServiceReference"
							},
							"name": "FactInternetSales"
						},
						{
							"linkedService": {
								"referenceName": "Slalom Azure Snowflake",
								"type": "LinkedServiceReference"
							},
							"name": "DimProduct"
						},
						{
							"linkedService": {
								"referenceName": "Slalom Azure Snowflake",
								"type": "LinkedServiceReference"
							},
							"name": "DimCurrency"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Slalom Azure Snowflake",
								"type": "LinkedServiceReference"
							},
							"name": "SnowflakeRefined"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tProductKey as decimal(38,0),\n\t\tOrderDateKey as decimal(38,0),\n\t\tDueDateKey as decimal(38,0),\n\t\tShipDateKey as decimal(38,0),\n\t\tCustomerKey as decimal(38,0),\n\t\tPromotionKey as decimal(38,0),\n\t\tCurrencyKey as decimal(38,0),\n\t\tSalesTerritoryKey as decimal(38,0),\n\t\tSalesOrderNumber as string,\n\t\tSalesOrderLineNumber as decimal(38,0),\n\t\tRevisionNumber as decimal(38,0),\n\t\tOrderQuantity as decimal(38,0),\n\t\tUnitPrice as double,\n\t\tExtendedAmount as double,\n\t\tUnitPriceDiscountPct as double,\n\t\tDiscountAmount as double,\n\t\tProductStandardCost as double,\n\t\tTotalProductCost as double,\n\t\tSalesAmount as double,\n\t\tTaxAmt as double,\n\t\tFreight as double,\n\t\tCarrierTrackingNumber as string,\n\t\tCustomerPONumber as string,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'table',\n\ttableName: 'FactInternetSales',\n\tschemaName: 'DBO',\n\tstore: 'snowflake') ~> FactInternetSales\nsource(output(\n\t\tProductKey as decimal(38,0),\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as decimal(38,0),\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as string,\n\t\tFrenchProductName as string,\n\t\tStandardCost as double,\n\t\tFinishedGoodsFlag as decimal(38,0),\n\t\tColor as string,\n\t\tSafetyStockLevel as decimal(38,0),\n\t\tReorderPoint as decimal(38,0),\n\t\tListPrice as double,\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as decimal(38,0),\n\t\tProductLine as string,\n\t\tDealerPrice as double,\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tFrenchDescription as string,\n\t\tChineseDescription as string,\n\t\tArabicDescription as string,\n\t\tHebrewDescription as string,\n\t\tThaiDescription as string,\n\t\tGermanDescription as string,\n\t\tJapaneseDescription as string,\n\t\tTurkishDescription as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'table',\n\ttableName: 'DimProduct',\n\tschemaName: 'DBO',\n\tstore: 'snowflake') ~> DimProduct\nsource(output(\n\t\tCurrencyKey as decimal(38,0),\n\t\tCurrencyAlternateKey as string,\n\t\tCurrencyName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'table',\n\ttableName: 'DimCurrency',\n\tschemaName: 'DBO',\n\tstore: 'snowflake') ~> DimCurrency\nFactInternetSales, DimProduct join(FactInternetSales@ProductKey == DimProduct@ProductKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, DimCurrency join(FactInternetSales@CurrencyKey == DimCurrency@CurrencyKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 aggregate(groupBy(ProductAlternateKey,\n\t\tEnglishProductName,\n\t\tCurrencyAlternateKey),\n\tUnitPrice = sum(UnitPrice)) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\ttableName: 'pricesByProduct_dataflow',\n\tschemaName: 'REFINED',\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys: ['ProductAlternateKey'],\n\tstore: 'snowflake',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SnowflakeRefined"
				}
			},
			"dependsOn": []
		}
	]
}